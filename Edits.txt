Calculis.Console
1.1. Created project Calculis.Console for testing the code.
1.2. Added Program.cs code and added System. to Console.WriteLine... .
1.3. Added DataItem.cs code.
1.4. Added reference to Calculis.Core, Calculis.Functions and usings.
1.5. Removed and sorted usings.
1.6. Rebuilt the solution and launched the Calculis.Console - OK.
=====================================================================

Calculis.Core
2.1. Created folder Entities/Items/Abstractions,Implementations/
2.2. Replaced IValue.cs and IValueItem.cs into Entities/Items/Abstractions/
2.3. Replaced CalculatingItem.cs and ConstantItem.cs into Entities/Items/Implementations/
2.4. Replaced ItemInfo.cs into Entities/Items/Implementations/

2.5. Created folder Entities/Functions/Abstractions,Implementations/
2.6. Replaced Function.cs into Entities/Functions/Abstractions/
2.6. Replaced FunctionInfo.cs into Entities/Functions/ 
2.7. Deleted using Calculis.Core.Items in FunctionInfo.cs, AbsFunction.cs;

2.8. Rebuilt the solution and launched the Calculis.Console - OK.

=====================================================================
Calculis.Core
3.1. Removed and sorted usings IValueItem.cs.
3.2. IValueItem.cs renamed -> IItem.cs for the solution.
3.3. CalculatingItem.cs renamed -> CalcItem.cs for the solution.
3.4. CalcItem.cs added readonly to private FunctionBase _function;

=====================================================================
Calculis.Core
4.1. CalcItem.cs: replaced up properties of class object to top of file. 
4.2. Function.cs: replaced up properties of class object to top of file. 

=====================================================================
 
5.1. Folders of files  Normal, Temporal were replaced from 
     Calculis.Functions to Calculis.Core/Entities/Functions/Implementations/. 
5.2. static FunctionManager() { Register("Calculis.Core.dll");} changed into 
     static FunctionManager() { Register("Calculis.Functions.dll");}.
5.3. The project Calculis.Functions has been deleted.
5.4. FunctionManager.cs added readonly to
      static readonly IDictionary<string, Assembly> _assemblies =
      new Dictionary<string, Assembly>();
5.5. Rebuilt the solution and launched - OK.
=====================================================================

6.1. CompareFunction.cs renamed:
     MoreFunction -> GreaterFunction,  MoreeqFunction -> GraterOrEqualFunction,
     LesseqFunction -> LessOrEqualFunction, EqFunction -> EqualFunction,
     NeqFunction -> NotEqualFunction
6.2. Created folder Calculis.Core\Entities\Functions\Implementations\
                                 Normal\Logic\CompareFunctions\
6.3. Created there classes GreaterFunction, GraterOrEqualFunction,
     LessFunction,LessOrEquaFunction, EqualFunction, NotEqualFunction.
6.4. Removed abstract class CompareFunctions.cs 
     to folder Calculis.Core\Entities\Functions\Abstractions\ 
6.5. CompareFunctions.cs name conflict: 
     Convert.ToDouble(result) -> System.Convert.ToDouble(result);
6.6. Rebuilt the solution and launched - OK.

=====================================================================

7.1. CompareFunction.cs renamed:
     AndFunction -> ANDFunction, OrFunction -> ORFunction,
     XorFunction -> XORFunction, NotFunction -> NOTFunction,
     LowbyteFunction -> LowerBytesFunction, HighbyteFunction -> UpperBytesFunction
7.2. Created folder Calculis.Core\Entities\Functions\Implementations\
                                 Normal\Logic\LogicFunctions\
7.3. Created there classes ANDFunction, ORFunction, XORFunction, NOTFunction, 
                           LowerBytesFunction, UpperBytesFunction.
7.4. Removed abstract class LogicFunction.cs 
     to folder Calculis.Core\Entities\Functions\Abstractions\ 
7.5. LogicFunction.cs name conflict:Convert. -> System.Convert.;
7.6. Rebuilt the solution and launched - OK.
7.7. Encapsulated Trigonometric Functions into Classes.
7.8. Replaced abstract class TrigonometricFunction into Abstraction Folder.
7.9. public PiFunction(IList<IItem> args?????????????????? What for are args there)  
7.10. Cleaned MaxFunction and MinFunction code.
7.11. Created folder Arithmetic Entities\Functions\Implementations\Normal\Arithmetic\
7.12. Replaced into there all arithmetic functions.
7.13. Rebuilt the solution and launched - OK.

=====================================================================

8.1. Simplified code of Temporal Functions.
8.2. Encapsulated CashItem.cs into Entities\Items\Implementations\ as public
8.3. Replaced Folder Base into Entities\Functions\Abstractions\
8.3. Restructured Folder Entities\Functions\ 
8.4. Renames Entities\Items\Abstractions\ into Entities\Items\Interfaces\
8.5. Created Entities\TimeProviders\ and structured TimerProviders
8.6. Timestamp -> TimeStamp 
8.7. ArgumentsNumberAttribute.cs -> ArgsNumAttribute.cs
8.8. Changed ArgsNumAttribute(int number)
        {
            if (number <= 0)
            {throw new ArgumentOutOfRangeException("Number of attribute should be greater then Zero");            }
            else { Number = number;}
        }
